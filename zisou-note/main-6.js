// /////////////////////////////////////////////////////////////////////////////
// //関数型プログラミングとは　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　//
// /////////////////////////////////////////////////////////////////////////////

//関数を駆使したプログラミングのこと

// const add2 = x => x + 2 // add2 という関数の箱を用意し、その中に引数　x　を用意、更に　x　に対して２をたす処理を行う
// const mul2 = x => x * 2 // mul2 という関数の箱を用意し、その中に引数　x　を用意、更に　x　に対して２をかける処理を行う

// const n = 3

// console.log(add2(n)) //=> 5
// console.log(mul2(n)) //=> 6
// console.log(mul2(add2(n))) //=>10　一番内側の（）を処理し３＋２　その後2番目の（）mul(5)処理して出力
//上の処理を使うと　(n + 2)*２ の処理を　mul2(add2(n))　とかける
//このような処理を関数の呼び出しの連続で記述するのを関数型プログラミングの特徴です


// /////////////////////////////////////////////////////////////////////////////
// //アロー関数（=>）のおさらい　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　//
// /////////////////////////////////////////////////////////////////////////////

// const arow = x => x + 2

//上の関数の書き方はあまり馴染み深くないですね
//これを書き慣れた書き方に変換してみましょう

// function arow(x) {
//       return x + 2
// }

//こちらの関数の書き方の方が書き慣れた方法ですが、短い関数は=>で表記した方がすっきりするので今回は前者を使ってみましょう




// /////////////////////////////////////////////////////////////////////////////
// //高階関数（関数を受け取る関数）　　　　　　　　　　　　　　　　　　　　　　　　　　　　//
// /////////////////////////////////////////////////////////////////////////////

//関数型プログラミングでは関数も「値」のように扱うことができる。
//このような関数を「第一級関数」という

//関数を値のように扱うというのは、例えると関数Aを関数Bの引数として渡すことができるということです
//以下例


                                      //解説
// const add2 = x => x + 2            //add2という関数を定義

// function twice (f , x ) {   　　　　//twiceという関数を定義　引数としてf、x（これはadd2の引数）を設定
//                                    //下のtwice()で渡された値を入れて解説すると
// return f(f(x))　　　　　　　　　　    // return add2 (add2 (10) ) となるよってtwice関数は、引数fの関数を引数xに対して二回呼び出す形となる
// }                             

// const result = twice(add2, 10)    //上記の式を内側（）から処理すると結果１４が出る
// console.log(result) //14    　　　　//twice(add2,10)のように関数に対してカッコを付けずに書くとその関数そのものを値として扱うことができる
// 　　　　　　　　　　　　　　　　　　　　　//今回はtwiceの第一引数に値を渡しています。「twiceのように関数を受け取る関数のことを高階関数といいます」


// /////////////////////////////////////////////////////////////////////////////
// //高階関数の具体例　　　　　　　　　　　　　　　　　　　　　　　　　　　//
// /////////////////////////////////////////////////////////////////////////////

//配列には map という高階関数が用意されています
//map とは配列の各要素に、何か処理を行い、別の要素の配列に変換するという関数です。この「何かの処理」を map に引数として渡すことことができます

//map 使用例　配列の全ての要素を２乗する
// const list = [1, 2, 3]

// const square = x => x * x //引数を２乗する

// console.log(list.map(square))

// //自習//
// const ul = [39, 48 , 59]

// const plus = x => x + 21

// console.log(ul.map(plus))



// /////////////////////////////////////////////////////////////////////////////
// //　　　　　　　　　　　　無名関数　　　　　　　　　　　　　　　　　　　　　　　　　　　//
// /////////////////////////////////////////////////////////////////////////////

//関数には無名関数という名前を付けない関数の書き方がある

// const list =[1, 2, 3]
// console.log(list.map(x => x * 2))   //x => x * 2　が　無名の関数で名前はなく処理が直接書いてある

//あるいはfunctionを使い以下のようにもかけます

const list = [1, 2, 3]
console.log(list.map(function(x) {return x * x })) //function(x) {return x * x }) が無名関数

// /////////////////////////////////////////////////////////////////////////////
// //高階関数の具体例２　イベントリスナの登録　　　　　　　　　　　　　　　　　　　　　　　　　　　//
// /////////////////////////////////////////////////////////////////////////////

//ボタンを押した時に処理を実行する例

// const button = document.querySelector('#submit')

// button.addEventListener('click', event => {//クリックした際の処理//})

//上記の場合はaddEventListenerが高階関数です、第２引数に、ボタンがクリック実行する処理を関数として渡します。
// 上記のように「ボタンクリック」などの任意のタイミングで発生する事象をイベントとよび
// 更にそれによって生じる処理をイベントリスナと呼びます

